local tapfail = require 'tapfail'
local t = require 'testhelper'

local ts = tapfail()
t( type(ts), 'function' )
t( ts'', nil )

local ts = tapfail()
t( type(ts), 'function' )
t( ts'not ok', 'no diagnostic or ok line' )

local ts = tapfail()
t( type(ts), 'function' )
t( ts'ok 1', nil )
t( ts'1..1', nil )
t( ts(), nil )

local ts = tapfail()
t( type(ts), 'function' )
t( ts'ok 1', nil )
t( ts'ok 2', nil )
t( ts'1..2', nil )

local ts = tapfail()
t( type(ts), 'function' )
t( ts'ok 1', nil )
t( ts'#not ok masked by diagnostic', nil )
t( ts'1..1', nil )

local ts = tapfail()
t( type(ts), 'function' )
t( ts'ok 2', 'invalid count sequence' )
t( ts'ok 1', 'invalid count sequence' )

local ts = tapfail()
t( type(ts), 'function' )
t( ts'ok 1', nil )
t( ts'ok 3', 'invalid count sequence' )
t( ts'ok 2', 'invalid count sequence' )

local ts = tapfail()
t( type(ts), 'function' )
t( ts'ok 1', nil )
t( ts'1..2', 'invalid test count' )

local ts = tapfail()
t( type(ts), 'function' )
t( ts'ok 1', nil )
t( ts'not ok', 'no diagnostic or ok line' )
t( ts'1..2', 'invalid test count' )

local ts = tapfail()
t( type(ts), 'function' )
t( ts'ok 1', nil )
t( ts'not ok', 'no diagnostic or ok line' )
t( ts'1..1', nil )

local ts = tapfail()
t( type(ts), 'function' )
t( ts'ok 1', nil )
t( ts(), 'summary missing' )

local ts = tapfail()
t( type(ts), 'function' )
t( ts'ok 1', nil )
t( ts'1..1', nil )
t( ts'ok 2', 'line after summary' )

local ts = tapfail()
t( type(ts), 'function' )
t( ts'ok 1', nil )
t( ts'1..2', 'invalid test count' )
t( ts'ok 2', 'line after summary' )

local ts = tapfail()
t( type(ts), 'function' )
t( ts'ok 1', nil )
t( ts'ok 2', nil )
t( ts'ok 3', nil )
t( ts'1..N', nil )
t( ts(), nil )

local ts = tapfail()
t( type(ts), 'function' )
t( ts'1..3', nil )
t( ts'ok 1', nil )
t( ts'ok 2', nil )
t( ts'ok 3', nil )
t( ts(), nil )

local ts = tapfail()
t( type(ts), 'function' )
t( ts'1..2', nil )
t( ts'ok 1', nil )
t( ts'ok 2', nil )
t( ts'ok 3', 'invalid count sequence' )

local ts = tapfail()
t( type(ts), 'function' )
t( ts'1..N', nil )
t( ts'ok 1', nil )
t( ts'ok 2', nil )
t( ts'ok 3', nil )
t( ts(), nil )

local ts = tapfail()
t( type(ts), 'function' )
t( ts'1..3', nil )
t( ts'ok 1', nil )
t( ts'ok 2', nil )
t( ts(), 'missing test' )

local ts = tapfail()
t( type(ts), 'function' )
t( ts'1..N', nil )
t( ts'ok 1', nil )
t( ts'ok 2', nil )
t( ts'ok 3', nil )
t( ts'1..N', 'summary already found at line 1' )

local ts = tapfail()
t( type(ts), 'function' )
t( ts'1..N', nil )
t( ts'ok 1', nil )
t( ts'ok 2', nil )
t( ts'1..N', 'summary already found at line 1' )
t( ts'ok 3', nil )

t()
