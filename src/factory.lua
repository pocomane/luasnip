--[===[DOC

= factory

[source,lua]
----
function factory( initFunc ) --> buildFunc, checkFunc
function factory( 'proxy', initFunc ) --> proxybuildFunc, checkFunc
----

This module create the `buildFunc` construction function, and the `checkFunc`
checker function. These functions can be used in a class/mixin pattern: calling
`buildFunc` just means to construct an object of a given class/mixin.  To grant
that the method of a base class is always present, the `poxybuildFunction`
variant can be used (generated by passing the 'proxy' string as the first
argument of `factory`.

The `buildFunc`:

[source,lua]
----
function buildFunc( initTab ) --> objectTab, ...
----

calls the `initFunc` on the `initTab` (or a new one if `nil` is passed). It
returns the `initTab`. Any return value of `initFunc` will be appended to the
results.

The `proxybuildFunc`:

[source,lua]
----
function buildFunc( initTab ) --> objectTab, ...
----

calls the `initFunc` on the `initTab` (or a new one if `nil` is passed). It
returns the `objectTab` proxy table to `initTab`. Any return value of
`initFunc` will be appended to the results.

The proxy table is an empty table that will dispach the read of unknown field to
the `initTab`, but not the write ones.

The `checkFunc`:

[source,lua]
----
function checkFunc( aTab ) --> truthnessBool 
----

takes any `aTab` table as input and checks if it was constructed with the
associated `buildFunc` or `buildproxyFunc`.

== Example

[source,lua,example]
----
local factory = require 'factory'

local makeObj, isObj = factory(function(ins)
  local private = {'ok'}
  function ins:getprivate()
    return private
  end
  return private
end)

local t2 = {}

local o1, p1 = makeObj()
local o2, p2 = makeObj(t2)

assert( isObj(o1) == true )
assert( isObj(o2) == true )
assert( isObj({}) == false )

assert( o1 ~= o2 )
assert( t2 == o2 )

local P1 = o1:getprivate()
local P2 = o2:getprivate()

assert( p1 == P1 )
assert( p2 == P2 )
assert( p1[1] == 'ok' )
assert( p2[1] == 'ok' )

p1.getprivate = nil
assert( p1.getprivate == nil )

local makeSub, isSub = factory(function(ins)
  makeObj(ins)
  local subprivate = {'OK'}
  function ins:getsubprivate()
    return subprivate
  end
end)

local o3, p3 = makeSub()
local P3b = o3:getprivate()
local P3s = o3:getsubprivate()

assert( p3 == nil )
assert( P3s ~= P3b )
assert( P3b[1] == 'ok' )
assert( P3s[1] == 'OK' )

assert( isSub(o1) == false )
assert( isSub(o2) == false )
assert( isSub(o3) == true )
assert( isObj(o3) == true )

----

]===]

local setmetatable = setmetatable

local function proxy(instance)
  return setmetatable({}, { __index = instance })
end

local function factory(a, b)

  local initializer, makeproxy
  if a == 'proxy' then
    initializer, makeproxy = b, true
  else
    initializer, makeproxy = a, false
  end

  local made_here = setmetatable({},{__mode='kv'})

  local function constructor(instance)
    instance = instance or {}
    local result
    if not makeproxy then
      result = instance
    else
      result = proxy(instance)
      made_here[result] = true
    end
    made_here[instance] = true
    return result, initializer(instance)
  end

  local checker = function(instance)
    if made_here[instance] then return true end
    return false
  end

  return constructor, checker
end

return factory
